/**
 * Blog Posts API
 * Massachusetts Retirement System - Blog Content Management
 */

import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'
import { BlogPost, BlogCategory } from '@/types/ai-blog'

/**
 * GET /api/blog/posts
 * Get published blog posts with filtering and pagination
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    
    // Parse query parameters
    const category = searchParams.get('category')
    const search = searchParams.get('search')
    const aiGenerated = searchParams.get('ai_generated')
    const status = searchParams.get('status') || 'published'
    const limit = parseInt(searchParams.get('limit') || '20')
    const offset = parseInt(searchParams.get('offset') || '0')
    const sortBy = searchParams.get('sort') || 'published_at'
    const sortOrder = searchParams.get('order') || 'desc'

    // Build where clause
    const where: any = {
      status: status as 'published' | 'draft' | 'archived'
    }

    // Filter by AI generated content
    if (aiGenerated !== null) {
      where.is_ai_generated = aiGenerated === 'true'
    }

    // Search functionality
    if (search) {
      where.OR = [
        { title: { contains: search, mode: 'insensitive' } },
        { content: { contains: search, mode: 'insensitive' } },
        { excerpt: { contains: search, mode: 'insensitive' } },
        { seo_keywords: { has: search } }
      ]
    }

    // Category filtering
    let categoryFilter = {}
    if (category && category !== 'all') {
      categoryFilter = {
        categories: {
          some: {
            category: {
              slug: category
            }
          }
        }
      }
    }

    // Fetch posts with relations
    const posts = await prisma.blogPost.findMany({
      where: {
        ...where,
        ...categoryFilter
      },
      include: {
        categories: {
          include: {
            category: true
          }
        },
        reviews: {
          where: {
            reviewStatus: 'approved'
          },
          orderBy: {
            reviewedAt: 'desc'
          },
          take: 1
        }
      },
      orderBy: {
        [sortBy]: sortOrder as 'asc' | 'desc'
      },
      take: limit,
      skip: offset
    })

    // Get total count for pagination
    const totalCount = await prisma.blogPost.count({
      where: {
        ...where,
        ...categoryFilter
      }
    })

    // Transform to match our types
    const transformedPosts: BlogPost[] = posts.map(post => ({
      id: post.id,
      title: post.title,
      slug: post.slug,
      content: post.content,
      excerpt: post.excerpt || undefined,
      featuredImageUrl: post.featuredImageUrl || undefined,
      authorId: post.authorId || undefined,
      publishedAt: post.publishedAt?.toISOString() || undefined,
      createdAt: post.createdAt.toISOString(),
      updatedAt: post.updatedAt.toISOString(),
      status: post.status as 'draft' | 'published' | 'archived',
      viewCount: post.viewCount,
      seoTitle: post.seoTitle || undefined,
      seoDescription: post.seoDescription || undefined,
      seoKeywords: post.seoKeywords || undefined,
      isAiGenerated: post.isAiGenerated,
      aiModelUsed: post.aiModelUsed || undefined,
      aiGenerationPrompt: post.aiGenerationPrompt || undefined,
      aiGenerationCost: post.aiGenerationCost ? parseFloat(post.aiGenerationCost.toString()) : undefined,
      contentQualityScore: post.contentQualityScore || undefined,
      factCheckStatus: post.factCheckStatus as 'pending' | 'approved' | 'needs_review' | 'rejected',
      scheduledPublishAt: post.scheduledPublishAt?.toISOString() || undefined,
      autoGeneratedTags: post.autoGeneratedTags || undefined,
      internalLinksAdded: post.internalLinksAdded,
      seoOptimized: post.seoOptimized
    }))

    return NextResponse.json({
      posts: transformedPosts,
      pagination: {
        total: totalCount,
        limit,
        offset,
        has_more: offset + limit < totalCount,
        page: Math.floor(offset / limit) + 1,
        total_pages: Math.ceil(totalCount / limit)
      },
      filters: {
        category,
        search,
        ai_generated: aiGenerated,
        status,
        sort_by: sortBy,
        sort_order: sortOrder
      }
    })

  } catch (error) {
    console.error('Error fetching blog posts:', error)
    return NextResponse.json(
      { error: 'Failed to fetch blog posts' },
      { status: 500 }
    )
  }
}




