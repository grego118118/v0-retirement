// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  // Basic profile fields
  retirementDate DateTime? // User's planned retirement date

  // OAuth accounts
  accounts      Account[]
  sessions      Session[]

  // Retirement data
  profile       RetirementProfile?
  calculations  RetirementCalculation[]
  emailLogs     EmailLog[]

  // Blog and AI content relations
  blogPosts     BlogPost[]
  contentJobs   AiContentJob[]
  contentReviews ContentReview[]

  // Subscription data
  stripeCustomerId    String?   // Stripe customer ID
  subscriptionId      String?   // Current subscription ID
  subscriptionStatus  String?   // active, canceled, past_due, etc.
  subscriptionPlan    String?   // free, monthly, annual
  currentPeriodEnd    DateTime? // When current subscription period ends
  cancelAtPeriodEnd   Boolean   @default(false)
  trialEnd           DateTime? // Trial end date if applicable

  // Usage tracking
  socialSecurityCalculations Int @default(0)
  wizardUses                 Int @default(0)
  pdfReports                 Int @default(0)
  lastUsageReset            DateTime? // For monthly usage limits

  // Email preferences
  emailPreferences          String? // JSON string of email preferences

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// OAuth account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session model for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Retirement profile - stores user's basic retirement information
model RetirementProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal information
  dateOfBirth         DateTime
  membershipDate      DateTime  // When they joined the retirement system
  retirementGroup     String    // Group 1, 2, 3, or 4
  benefitPercentage   Float     // e.g., 2.5 for Group 1
  
  // Employment information
  currentSalary       Float
  averageHighest3Years Float?   // Can be calculated or manually entered
  yearsOfService      Float?    // Can be calculated from membershipDate
  
  // Settings
  retirementDate      DateTime? // User's planned retirement date
  retirementOption    String?   // Option A, B, or C

  // Social Security information
  estimatedSocialSecurityBenefit Float? // Monthly Social Security benefit estimate

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// Retirement calculation - stores each calculation run by the user
model RetirementCalculation {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Input parameters
  calculationName     String?  // User can name their scenarios
  retirementDate      DateTime
  retirementAge       Int
  yearsOfService      Float
  averageSalary       Float
  retirementGroup     String
  benefitPercentage   Float
  retirementOption    String   // Option A, B, or C
  
  // Calculated results
  monthlyBenefit      Float
  annualBenefit       Float
  benefitReduction    Float?   // If retiring early
  survivorBenefit     Float?   // For Option B or C
  
  // Social Security data (stored as JSON)
  socialSecurityData  String?  // JSON string containing SS calculation data
  
  // Additional data
  notes               String?
  isFavorite          Boolean  @default(false)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@index([userId])
  @@index([createdAt])
}


// Email Log - tracks email sending for rate limiting and analytics
model EmailLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // 'welcome', 'password-reset', 'subscription-change', etc.
  recipients  String   // Comma-separated email addresses
  success     Boolean  // Whether the email was sent successfully
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

// Newsletter Subscriber - tracks newsletter subscriptions
model NewsletterSubscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  isActive      Boolean  @default(true)
  subscribedAt  DateTime @default(now())
  unsubscribedAt DateTime?
  source        String?  // 'website', 'calculator', 'social', etc.
  preferences   String?  // JSON string for email preferences

  @@index([email])
  @@index([subscribedAt])
  @@index([isActive])
}

// Blog system models for AI content generation
model BlogPost {
  id                    String    @id @default(uuid())
  title                 String
  slug                  String    @unique
  content               String
  excerpt               String?
  featuredImageUrl      String?   @map("featured_image_url")
  authorId              String?   @map("author_id")
  publishedAt           DateTime? @map("published_at")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at")
  status                String    @default("draft") // draft, published, archived
  viewCount             Int       @default(0) @map("view_count")
  seoTitle              String?   @map("seo_title")
  seoDescription        String?   @map("seo_description")
  seoKeywords           String[]  @map("seo_keywords")

  // AI-specific fields
  isAiGenerated         Boolean   @default(false) @map("is_ai_generated")
  aiModelUsed           String?   @map("ai_model_used")
  aiGenerationPrompt    String?   @map("ai_generation_prompt")
  aiGenerationCost      Decimal?  @map("ai_generation_cost") @db.Decimal(10,4)
  contentQualityScore   Int?      @map("content_quality_score")
  factCheckStatus       String    @default("pending") @map("fact_check_status") // pending, approved, needs_review, rejected
  scheduledPublishAt    DateTime? @map("scheduled_publish_at")
  autoGeneratedTags     String[]  @map("auto_generated_tags")
  internalLinksAdded    Boolean   @default(false) @map("internal_links_added")
  seoOptimized          Boolean   @default(false) @map("seo_optimized")

  // Relations
  author                User?     @relation(fields: [authorId], references: [id])
  categories            BlogPostCategory[]
  reviews               ContentReview[]
  analytics             BlogAnalytics[]
  aiJobs                AiContentJob[]
  usageCosts            AiUsageCost[]

  @@map("blog_posts")
}

model BlogCategory {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  color       String    @default("#3B82F6")
  icon        String?
  sortOrder   Int       @default(0) @map("sort_order")
  isAiTopic   Boolean   @default(false) @map("is_ai_topic")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  posts       BlogPostCategory[]
  jobs        AiContentJob[]
  templates   AiContentTemplate[]

  @@map("blog_categories")
}

model BlogPostCategory {
  id         String      @id @default(uuid())
  postId     String      @map("post_id")
  categoryId String      @map("category_id")
  createdAt  DateTime    @default(now()) @map("created_at")

  // Relations
  post       BlogPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("blog_post_categories")
}

model AiContentJob {
  id                   String    @id @default(uuid())
  jobType              String    @map("job_type") // scheduled_post, topic_research, content_update, seo_optimization
  status               String    @default("pending") // pending, running, completed, failed, cancelled
  topic                String
  categoryId           String?   @map("category_id")
  targetPublishDate    DateTime? @map("target_publish_date")
  aiModel              String    @default("gpt-4") @map("ai_model")
  generationPrompt     String?   @map("generation_prompt")
  generatedPostId      String?   @map("generated_post_id")
  errorMessage         String?   @map("error_message")
  costEstimate         Decimal?  @map("cost_estimate") @db.Decimal(10,4)
  actualCost           Decimal?  @map("actual_cost") @db.Decimal(10,4)
  executionTimeSeconds Int?      @map("execution_time_seconds")
  createdAt            DateTime  @default(now()) @map("created_at")
  startedAt            DateTime? @map("started_at")
  completedAt          DateTime? @map("completed_at")
  createdBy            String?   @map("created_by")

  // Relations
  category             BlogCategory? @relation(fields: [categoryId], references: [id])
  generatedPost        BlogPost?     @relation(fields: [generatedPostId], references: [id])
  creator              User?         @relation(fields: [createdBy], references: [id])
  costs                AiUsageCost[]

  @@map("ai_content_jobs")
}

model ContentReview {
  id                    String    @id @default(uuid())
  postId                String    @map("post_id")
  reviewerId            String?   @map("reviewer_id")
  reviewStatus          String    @map("review_status") // pending, approved, needs_changes, rejected
  reviewNotes           String?   @map("review_notes")
  factCheckCompleted    Boolean   @default(false) @map("fact_check_completed")
  seoCheckCompleted     Boolean   @default(false) @map("seo_check_completed")
  contentQualityRating  Int?      @map("content_quality_rating")
  suggestedChanges      String?   @map("suggested_changes")
  reviewedAt            DateTime  @default(now()) @map("reviewed_at")
  createdAt             DateTime  @default(now()) @map("created_at")

  // Relations
  post                  BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  reviewer              User?     @relation(fields: [reviewerId], references: [id])

  @@map("content_reviews")
}

model AiContentTemplate {
  id                    String    @id @default(uuid())
  name                  String    @unique
  description           String?
  categoryId            String?   @map("category_id")
  templateType          String    @map("template_type") // blog_post, newsletter, guide, update
  systemPrompt          String    @map("system_prompt")
  userPromptTemplate    String    @map("user_prompt_template")
  expectedWordCount     Int       @default(1000) @map("expected_word_count")
  seoFocusKeywords      String[]  @map("seo_focus_keywords")
  internalLinkTargets   String[]  @map("internal_link_targets")
  isActive              Boolean   @default(true) @map("is_active")
  usageCount            Int       @default(0) @map("usage_count")
  averageQualityScore   Decimal?  @map("average_quality_score") @db.Decimal(3,1)
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  category              BlogCategory? @relation(fields: [categoryId], references: [id])

  @@map("ai_content_templates")
}

model BlogAnalytics {
  id                String    @id @default(uuid())
  postId            String    @map("post_id")
  date              DateTime  @db.Date
  pageViews         Int       @default(0) @map("page_views")
  uniqueVisitors    Int       @default(0) @map("unique_visitors")
  timeOnPageSeconds Int       @default(0) @map("time_on_page_seconds")
  bounceRate        Decimal?  @map("bounce_rate") @db.Decimal(5,2)
  socialShares      Int       @default(0) @map("social_shares")
  calculatorClicks  Int       @default(0) @map("calculator_clicks")
  adsenseRevenue    Decimal?  @map("adsense_revenue") @db.Decimal(10,4)
  createdAt         DateTime  @default(now()) @map("created_at")

  // Relations
  post              BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, date])
  @@map("blog_analytics")
}

model AiUsageCost {
  id              String    @id @default(uuid())
  date            DateTime  @db.Date
  serviceProvider String    @map("service_provider") // openai, anthropic, stability
  serviceType     String    @map("service_type") // text_generation, image_generation, fact_checking
  tokensUsed      Int?      @map("tokens_used")
  apiCalls        Int       @default(0) @map("api_calls")
  costUsd         Decimal   @map("cost_usd") @db.Decimal(10,4)
  postId          String?   @map("post_id")
  jobId           String?   @map("job_id")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  post            BlogPost?     @relation(fields: [postId], references: [id])
  job             AiContentJob? @relation(fields: [jobId], references: [id])

  @@map("ai_usage_costs")
}


