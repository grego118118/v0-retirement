// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?

  // OAuth accounts
  accounts      Account[]
  sessions      Session[]

  // Retirement data
  profile       RetirementProfile?
  calculations  RetirementCalculation[]
  actionItems   ActionItem[]
  pdfGenerations PdfGeneration[]
  emailLogs     EmailLog[]
  pdfShares     PdfShare[]

  // Scenario modeling
  retirementScenarios RetirementScenario[]
  scenarioComparisons ScenarioComparison[]
  scenarioShares      ScenarioShare[]

  // Subscription data
  stripeCustomerId    String?   // Stripe customer ID
  subscriptionId      String?   // Current subscription ID
  subscriptionStatus  String?   // active, canceled, past_due, etc.
  subscriptionPlan    String?   // free, monthly, annual
  currentPeriodEnd    DateTime? // When current subscription period ends
  cancelAtPeriodEnd   Boolean   @default(false)
  trialEnd           DateTime? // Trial end date if applicable

  // Usage tracking
  socialSecurityCalculations Int @default(0)
  wizardUses                 Int @default(0)
  pdfReports                 Int @default(0)
  lastUsageReset            DateTime? // For monthly usage limits

  // Email preferences
  emailPreferences          String? // JSON string of email preferences

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// OAuth account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session model for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Retirement profile - stores user's basic retirement information
model RetirementProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Personal information
  dateOfBirth         DateTime
  membershipDate      DateTime  // When they joined the retirement system
  retirementGroup     String    // Group 1, 2, 3, or 4
  benefitPercentage   Float     // e.g., 2.5 for Group 1
  
  // Employment information
  currentSalary       Float
  averageHighest3Years Float?   // Can be calculated or manually entered
  yearsOfService      Float?    // Can be calculated from membershipDate
  
  // Settings
  plannedRetirementAge Int?
  retirementOption    String?   // Option A, B, or C
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

// Retirement calculation - stores each calculation run by the user
model RetirementCalculation {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Input parameters
  calculationName     String?  // User can name their scenarios
  retirementDate      DateTime
  retirementAge       Int
  yearsOfService      Float
  averageSalary       Float
  retirementGroup     String
  benefitPercentage   Float
  retirementOption    String   // Option A, B, or C
  
  // Calculated results
  monthlyBenefit      Float
  annualBenefit       Float
  benefitReduction    Float?   // If retiring early
  survivorBenefit     Float?   // For Option B or C
  
  // Social Security data (stored as JSON)
  socialSecurityData  String?  // JSON string containing SS calculation data
  
  // Additional data
  notes               String?
  isFavorite          Boolean  @default(false)

  // Relationships
  actionItems         ActionItem[]

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

// PDF Generation tracking - stores PDF generation history and usage
model PdfGeneration {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfType         String   // 'comprehensive', 'summary', 'calculations-only'
  generationTime  Int      // Generation time in milliseconds
  fileSize        Int      @default(0) // File size in bytes (for future use)
  success         Boolean  @default(true) // Whether generation was successful
  errorMessage    String?  // Error message if generation failed
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([pdfType])
  @@index([success])
}

// Email Log - tracks email sending for rate limiting and analytics
model EmailLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // 'welcome', 'password-reset', 'subscription-change', etc.
  recipients  String   // Comma-separated email addresses
  success     Boolean  // Whether the email was sent successfully
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([type])
}

// PDF Share - tracks PDF sharing via email
model PdfShare {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfType           String   // 'pension', 'tax', 'wizard', 'combined'
  recipients        String   // Comma-separated email addresses
  recipientCount    Int      // Number of recipients
  successfulShares  Int      // Number of successful email sends
  createdAt         DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([pdfType])
}

// Action items and recommendations - stores personalized guidance for users
model ActionItem {
  id                  String   @id @default(cuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Action item details
  title               String
  description         String
  category            String   // 'profile', 'calculation', 'planning', 'optimization', 'education'
  priority            String   // 'high', 'medium', 'low'
  status              String   @default("pending") // 'pending', 'in-progress', 'completed', 'dismissed'

  // Context and targeting
  triggerCondition    String?  // JSON string describing what triggered this action item
  targetGroup         String?  // Specific retirement group this applies to
  targetAgeRange      String?  // Age range this applies to (e.g., "55-65")
  targetServiceRange  String?  // Years of service range (e.g., "20-30")

  // Action details
  actionType          String   // 'navigate', 'calculate', 'review', 'contact', 'learn'
  actionUrl           String?  // URL to navigate to for this action
  actionData          String?  // JSON string with additional action data

  // Completion tracking
  completedAt         DateTime?
  dismissedAt         DateTime?
  dismissalReason     String?

  // Relationships
  relatedCalculationId String?
  relatedCalculation   RetirementCalculation? @relation(fields: [relatedCalculationId], references: [id], onDelete: SetNull)

  // Metadata
  displayOrder        Int      @default(0)
  expiresAt           DateTime? // Optional expiration for time-sensitive items
  isSystemGenerated   Boolean  @default(true)
  generationReason    String?  // Why this action item was generated

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
}

// Retirement Scenario - stores different retirement scenarios for comparison
model RetirementScenario {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Scenario metadata
  name                  String
  description           String?
  isBaseline            Boolean  @default(false)

  // Scenario parameters stored as JSON for flexibility
  personalParameters    String   // JSON: retirement age, life expectancy, etc.
  pensionParameters     String   // JSON: retirement group, years of service, etc.
  socialSecurityParameters String // JSON: claiming age, benefits, etc.
  financialParameters   String   // JSON: investments, withdrawal strategy, etc.
  taxParameters         String   // JSON: filing status, optimization strategy, etc.
  colaParameters        String   // JSON: COLA assumptions and schedules

  // Relationships
  results               ScenarioResult?
  comparisons           ScenarioComparison[]
  shares                ScenarioShare[]

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([isBaseline])
  @@index([createdAt])
}

// Scenario Results - calculated outcomes for a scenario
model ScenarioResult {
  id                    String   @id @default(cuid())
  scenarioId            String   @unique
  scenario              RetirementScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  // Core benefit calculations
  pensionMonthlyBenefit Float
  pensionAnnualBenefit  Float
  pensionLifetimeBenefits Float
  pensionBenefitReduction Float @default(0)
  pensionSurvivorBenefit Float?

  ssMonthlyBenefit      Float
  ssAnnualBenefit       Float
  ssLifetimeBenefits    Float
  ssSpousalBenefit      Float?
  ssSurvivorBenefit     Float?

  // Combined income
  totalMonthlyIncome    Float
  totalAnnualIncome     Float
  netAfterTaxIncome     Float
  replacementRatio      Float

  // Tax analysis
  annualTaxBurden       Float
  effectiveTaxRate      Float
  marginalTaxRate       Float
  federalTax            Float
  stateTax              Float
  socialSecurityTax     Float

  // Portfolio analysis (optional)
  initialPortfolioBalance Float?
  finalPortfolioBalance Float?
  totalWithdrawals      Float?
  portfolioLongevity    Float?
  probabilityOfSuccess  Float?

  // Key metrics
  totalLifetimeIncome   Float
  breakEvenAge          Float?
  riskScore             Float
  flexibilityScore      Float
  optimizationScore     Float

  // Detailed projections stored as JSON
  yearlyProjections     String?  // JSON array of yearly data

  calculatedAt          DateTime @default(now())

  @@index([calculatedAt])
}

// Scenario Comparison - stores saved comparisons between scenarios
model ScenarioComparison {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name                  String
  description           String?

  // Scenarios included in this comparison (many-to-many relationship)
  scenarios             RetirementScenario[]

  // Comparison results stored as JSON
  comparisonMetrics     String   // JSON: comparison metrics
  recommendations       String   // JSON: array of recommendations

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}

// Scenario Share - for sharing scenarios with advisors/family
model ScenarioShare {
  id                    String   @id @default(cuid())
  scenarioId            String
  scenario              RetirementScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  shareToken            String   @unique
  recipientEmail        String?
  recipientName         String?

  // Access control
  expiresAt             DateTime?
  isActive              Boolean  @default(true)
  viewCount             Int      @default(0)
  lastViewedAt          DateTime?

  // Permissions
  canViewDetails        Boolean  @default(true)
  canDownloadPdf        Boolean  @default(false)
  canDuplicate          Boolean  @default(false)

  createdAt             DateTime @default(now())

  @@index([scenarioId])
  @@index([userId])
  @@index([shareToken])
  @@index([expiresAt])
}
